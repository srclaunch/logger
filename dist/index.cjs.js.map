{
  "version": 3,
  "sources": ["../src/index.ts", "../node_modules/nanoid/index.browser.js", "../src/lib/logger.ts"],
  "sourcesContent": ["import { getExpressMiddleware } from './lib/express-middleware.js';\nexport { Logger } from './lib/logger.js';\nexport { type CloudWatchConfig } from './types/cloudwatch';\nexport { type LoggerConfig } from './types/index';\n", "import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n", "import { Environment, LogLevel } from '@srclaunch/types';\n// import { getBrowserEnvironment, getNodeEnvironment } from '@srclaunch/environment';\nimport { nanoid } from 'nanoid';\n\n// import winston from 'winston';\n// import { CloudWatchConfig } from '../types/cloudwatch';\nimport {\n  AnalyticsEventProps,\n  CriticalEventProps,\n  DebugEventProps,\n  ExceptionEventProps,\n  HttpEventProps,\n  InfoEventProps,\n  WarningEventProps,\n} from '../types/events';\nimport { LoggerConfig } from '../types/index';\n// import { LogLevel } from '../types/levels';\n// import { getCloudwatchTransport } from './cloudwatch.js';\n\nexport class Logger {\n  private readonly level: LogLevel;\n  public readonly environment?: Environment;\n\n  public analytics(props: AnalyticsEventProps): void {\n    console.info({ ...this.getCommonProps(), ...props });\n  }\n  public critical(props: CriticalEventProps): void {\n    console.error({ ...props, ...this.getCommonProps() });\n  }\n  public debug(props: DebugEventProps): void {\n    console.debug({ ...props, ...this.getCommonProps() });\n  }\n  public async exception(props: ExceptionEventProps): Promise<void> {\n    console.error({ ...props, ...this.getCommonProps() });\n  }\n  public http(props: HttpEventProps): void {\n    console.info({ ...this.getCommonProps(), ...props });\n  }\n  public async info(props: InfoEventProps): Promise<void> {\n    console.info({ ...this.getCommonProps(), message: props });\n  }\n  public warning(props: WarningEventProps): void {\n    console.warn({ ...this.getCommonProps(), ...props });\n  }\n  private getCommonProps() {\n    return {\n      created: new Date().toString(),\n      environment: this.environment?.id,\n      id: nanoid(),\n    };\n  }\n\n  public constructor(config?: LoggerConfig) {\n    this.environment = config?.environment;\n    this.level = config?.level ?? 'info';\n  }\n\n  // private getLogLevel(): string {\n  //   switch (this.environment?.type) {\n  //     case EnvironmentType.Development:\n  //       return 'debug';\n  //     case EnvironmentType.NonProduction:\n  //       return 'debug';\n  //     case EnvironmentType.Production:\n  //       return 'warning';\n  //   }\n  // }\n\n  // private getFormatters() {\n  //   return {\n  //     console: winston.format.combine(\n  //       winston.format.timestamp({ format: 'hh:mm:ss' }),\n  //       winston.format.colorize({ all: true }),\n  //       winston.format.printf(event => {\n  //         return `[${event.timestamp} - ${this.environment.id}] ${event.level}: ${event.message}`;\n  //       }),\n  //     ),\n  //   };\n  // }\n  // private getEnvironmentTransports({\n  //   cloudwatchConfig,\n  // }: {\n  //   cloudwatchConfig?: CloudWatchConfig;\n  // }) {\n  //   // const fileTransport = new winston.transports.File({ filename: 'combined.log' });\n  //   // const consoleTransport = new winston.transports.Console();\n\n  //   switch (this.environment.type) {\n  //     case EnvironmentType.Development:\n  //     // return [consoleTransport];\n  //     case EnvironmentType.NonProduction:\n  //     // return [consoleTransport];\n  //     case EnvironmentType.Production:\n  //       if (cloudwatchConfig) {\n  //         const cloudWatchTransport = getCloudwatchTransport(cloudwatchConfig);\n\n  //         return [cloudWatchTransport];\n  //       }\n\n  //       return [];\n  //   }\n  // }\n}\n"],
  "mappings": "o8BAAA,iDCmBA,GAAI,GAAS,CAAC,EAAO,KAAO,CAC1B,GAAI,GAAK,GACL,EAAQ,OAAO,gBAAgB,GAAI,YAAW,CAAI,CAAC,EACvD,KAAO,KAAQ,CACb,GAAI,GAAO,EAAM,GAAQ,GACzB,AAAI,EAAO,GACT,GAAM,EAAK,SAAS,EAAE,EACjB,AAAI,EAAO,GAChB,GAAO,GAAO,IAAI,SAAS,EAAE,EAAE,YAAY,EACtC,AAAI,EAAO,GAChB,GAAM,IAEN,GAAM,GAEV,CACA,MAAO,EACT,EChBO,WAAa,CAIX,UAAU,EAAkC,CACjD,QAAQ,KAAK,OAAK,KAAK,eAAe,GAAM,EAAO,CACrD,CACO,SAAS,EAAiC,CAC/C,QAAQ,MAAM,OAAK,GAAU,KAAK,eAAe,EAAG,CACtD,CACO,MAAM,EAA8B,CACzC,QAAQ,MAAM,OAAK,GAAU,KAAK,eAAe,EAAG,CACtD,CACa,UAAU,EAA2C,gCAChE,QAAQ,MAAM,OAAK,GAAU,KAAK,eAAe,EAAG,CACtD,GACO,KAAK,EAA6B,CACvC,QAAQ,KAAK,OAAK,KAAK,eAAe,GAAM,EAAO,CACrD,CACa,KAAK,EAAsC,gCACtD,QAAQ,KAAK,OAAK,KAAK,eAAe,GAAzB,CAA4B,QAAS,CAAM,EAAC,CAC3D,GACO,QAAQ,EAAgC,CAC7C,QAAQ,KAAK,OAAK,KAAK,eAAe,GAAM,EAAO,CACrD,CACQ,gBAAiB,CA5C3B,MA6CI,MAAO,CACL,QAAS,GAAI,MAAK,EAAE,SAAS,EAC7B,YAAa,QAAK,cAAL,cAAkB,GAC/B,GAAI,EAAO,CACb,CACF,CAEO,YAAY,EAAuB,CApD5C,MAqDI,KAAK,YAAc,iBAAQ,YAC3B,KAAK,MAAQ,oBAAQ,QAAR,OAAiB,MAChC,CA+CF",
  "names": []
}
